[project]
name = "glue-jupyter"
classifiers = [
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Visualization",
    "License :: OSI Approved :: BSD License",
]

description = "Jupyter notebook/lab viewers for glue"
readme = "README.rst"
requires-python = ">=3.8"
dynamic = [ "version",]

authors = [
    {name = "Maarten A. Breddels", email = "maartenbreddels@gmail.com"},
    {name =  "Thomas Robitaille"},
]

dependencies = [
    "glue-core>=1.20.0",
    "glue-vispy-viewers[jupyter]>=1.2.1",
    "notebook>=4.0",
    "ipython_genutils>=0.2",
    "ipympl>=0.3.0",
    "ipyvolume>=0.6.0",
    "ipython_genutils>=0.2",
    "ipywidgets>=7.4.0",
    "ipyvue>=1.2.0,<2",
    "ipyvuetify>=1.2.0,<2",
    "bqplot-image-gl>=1.6.0",
    "bqplot>=0.12.17",
    "bqplot-gl",
    "scikit-image",
]

[project.urls]
Homepage = "https://glueviz.org"

[project.optional-dependencies]
docs = [
    "sphinx",
    "sphinx-automodapi",
    "numpydoc",
    "nbconvert>=6.4.5",
    "nbsphinx",
    "sphinx-book-theme",
]

test = [
    "pytest",
    "pytest-cov",
    "nbconvert>=6.4.5",
]

visualtest = [
    "playwright==1.41.2",
    "pytest-playwright==0.5.2",
    "pytest-mpl",
    "solara[pytest]>=1.44.1",
]

[build-system]
requires = ["setuptools>=61.2",
            "setuptools_scm"]
build-backend = 'setuptools.build_meta'

[tool.setuptools]
zip-safe = false
include-package-data = false

[tool.setuptools.package-data]
"glue_jupyter.table" = [ "*.vue",]
"glue_jupyter.widgets" = [ "*.vue",]
"glue_jupyter.common.state_widgets" = [ "*.vue",]
glue_jupyter = [ "*.vue",]
"glue_jupyter.common" = [ "*.vue",]
"glue_jupyter.bqplot.tests" = [ "data/*.ipynb",]
"glue_jupyter.ipyvolume.tests" = [ "data/*.ipynb",]
"glue_jupyter.matplotlib.tests" = [ "data/*.ipynb",]
"glue_jupyter.tests" = [ "data/*.ipynb",]
"glue_jupyter.icons" = [ "*.svg",]

[tool.setuptools.packages.find]
namespaces = false

[tool.setuptools_scm]
version_file = "glue_jupyter/_version.py"

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:the imp module is deprecated:DeprecationWarning:glue.config.*:",
    "ignore:`np.float` is a deprecated alias:DeprecationWarning:glue.*:",
    "ignore:Numpy has detected .* writing to an array:DeprecationWarning:",
    "ignore:The keymap.* rcparam was deprecated::glue.config.*:",
    "ignore:metadata .* was set from the constructor:DeprecationWarning:bqplot.*:",
    "ignore:default_opacities is deprecated:DeprecationWarning:bqplot.*:",
    "ignore:Traits should be given as instances:DeprecationWarning:bqplot_image_gl.*:",
    "ignore:Traits should be given as instances:DeprecationWarning:ipyvolume.*:",
    "ignore:Using or importing the ABCs from 'collections':DeprecationWarning:ipyvolume.*:",
    "ignore:Passing unrecogi?nized arguments to super:DeprecationWarning:ipywidgets.*:",
    "ignore:the load_module.* method is deprecated and slated for removal in Python 3.12. use exec_module:DeprecationWarning:glue.*:",
    "ignore:There is no current event loop:DeprecationWarning:nbclient.*:",
    "ignore:defusedxml.cElementTree is deprecated:DeprecationWarning:nbconvert.filters.*:",
    "ignore:Keyword `trait:DeprecationWarning:pythreejs.*:",
    "ignore::DeprecationWarning:traittypes.*:",
    "ignore::FutureWarning:traitlets.*:",
    "ignore:Creating an ndarray from ragged nested sequences::numpy.core.*:",
    "ignore:Creating an ndarray from ragged nested sequences::numpy.linalg.*:",
    "ignore:'contextfilter' is renamed to 'pass_context':DeprecationWarning:",
    "ignore:Passing a schema:DeprecationWarning",
    "ignore:distutils Version:DeprecationWarning",
    "ignore:There is no current event loop:DeprecationWarning",
    "ignore:Jupyter is migrating its paths to use standard platformdirs:DeprecationWarning",
    "ignore:Widget._active_widgets is deprecated:DeprecationWarning",
    "ignore:Widget._widget_types is deprecated:DeprecationWarning",
    "ignore:Widget.widget_types is deprecated:DeprecationWarning",
    "ignore:Widget.widgets is deprecated:DeprecationWarning",
    "ignore:`np.bool8` is a deprecated alias for `np.bool_`.:DeprecationWarning:skimage.util.dtype.*:",
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
    "ignore:Deprecated call to `pkg_resources.declare_namespace(.*)`:DeprecationWarning",
]

[tool.gilesbot]
[tool.gilesbot.circleci_artifacts]
enabled = true

[tool.gilesbot.circleci_artifacts.figure_report]
url = "results/fig_comparison.html"
message = "Click details to see the image test comparisons, for py311-test-visual"
report_on_fail = true

[tool.ruff]
# ruff check: pycodestyle, Pyflakes, McCabe, flake8-bugbear, flake8-simplify
lint.select = ["ALL"]
exclude=[
    "*_parsetab.py",
    "*_lextab.py"
]
lint.ignore = [  # NOTE: non-permanent exclusions should be added to `.ruff.toml` instead.

    # flake8-builtins (A) : shadowing a Python built-in.
    # New ones should be avoided and is up to maintainers to enforce.
    "A00",

    # flake8-commas (COM)
    "COM812",  # TrailingCommaMissing

    # pydocstyle (D)
    # Missing Docstrings
    "D102",  # Missing docstring in public method. Don't check b/c docstring inheritance.
    "D105",  # Missing docstring in magic method. Don't check b/c class docstring.
    # Whitespace Issues
    "D200",  # FitsOnOneLine
    # Docstring Content Issues
    "D410",  # BlankLineAfterSection. Using D412 instead.
    "D400",  # EndsInPeriod.  NOTE: might want to revisit this.

    # pycodestyle (E, W)
    "E741",  # AmbiguousVariableName. Physics variables are often poor code variables

    # flake8-fixme (FIX)
    "FIX002",  # Line contains TODO | notes for improvements are OK iff the code works

    # ISC001 shouldn't be used with ruff format
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "ISC001",

    # pep8-naming (N)
    "N803",  # invalid-argument-name. Physics variables are often poor code variables
    "N806",  # non-lowercase-variable-in-function. Physics variables are often poor code variables

    # flake8-self (SLF)
    "SLF001", # private member access

    # flake8-todos (TD)
    "TD002",  # Missing author in TODO

    # Ruff-specific rules (RUF)
    "RUF001",  # ambiguous-unicode-character-string
    "RUF005",  # unpack-instead-of-concatenating-to-collection-literal -- it's not clearly faster.
    "RUF012",  # Mutable class attributes should be annotated with `typing.ClassVar`
    "RUF021",  # Parenthesize `a and b` expressions when chaining `and` and `or` together
    "RUF022",  # `__all__` is not sorted
    "RUF100",  # Unused blanket `noqa` directive
]

[tool.ruff.lint.extend-per-file-ignores]
# implicit-namespace-package. The examples and configuration files are not a package.
".github/workflows/*.py" = ["INP001"]
"setup.py" = ["INP001"]
"docs/conf.py" = ["INP001"]
# `import` should be at the top-level of a file. Most of the following are conditional imports.
"glue_jupyter/__init__.py" = ["PLC0415"]
"glue_jupyter/app.py" = ["PLC0415"]

[tool.ruff.lint.flake8-annotations]
ignore-fully-untyped = true
mypy-init-return = true

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-type-checking]
exempt-modules = []

[tool.ruff.lint.isort]
known-first-party = ["glue_jupyter", "glue_core"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
